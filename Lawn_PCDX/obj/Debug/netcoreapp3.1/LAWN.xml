<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LAWN</name>
    </assembly>
    <members>
        <member name="P:Microsoft.Xna.Framework.Net.MonoGamerPeer.SimulatedLatency">
            <summary>
            Used to Simulate the delay between computers
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Net.MonoGamerPeer.SimulatedPacketLoss">
            <summary>
            Used to simulate the number of packets you might expect to loose.
            </summary>
        </member>
        <member name="M:Microsoft.Xna.Framework.Net.MonoGamerPeer.GetServerList(Microsoft.Xna.Framework.Net.MonoGamerPeer.NetPeer)">
            <summary>
            Contacts the Master Server on the net and gets a list of available host games
            </summary>
            <param name="netPeer"></param>
        </member>
        <member name="F:LawnMod.IronPyInteractive.mWS">
            <summary>
            Defines the entry point of the application.
            </summary>
            <param name="args">The arguments.</param>
        </member>
        <member name="T:LawnMod.MonoModUtils">
            <summary>
            各种辅助MonoMod以及使用IronPython进行动态Hook的工具，
            例如将Python函数转为MonoMod.RuntimeDetour.DynamicHookGen可用的形式
            </summary>
        </member>
        <member name="M:LawnMod.MonoModUtils.StripPythonMethodDesc(System.Object@)">
            <summary>
            脱掉Python为函数方法加的壳，获取真正的MethodInfo
            </summary>
            <param name="o">输入的Python函数</param>
            <returns>函数内部的MethodInfo</returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:LawnMod.MonoModUtils.GetFirstTargetFromPythonMethodDesc(IronPython.Runtime.Types.BuiltinMethodDescriptor@)">
            <summary>
            获取Python方法描述符的第一个执行目标
            </summary>
            <param name="desc">Python方法描述</param>
            <returns>被封装的MethodInfo</returns>
        </member>
        <member name="M:LawnMod.MonoModUtils.GetFirstTargetFromPythonBuiltinFunc(IronPython.Runtime.Types.BuiltinFunction@)">
            <summary>
            获取Python内置方法封装的第一个执行目标
            </summary>
            <param name="desc">Python内置方法</param>
            <returns>被封装的MethodInfo</returns>
        </member>
        <member name="M:LawnMod.MonoModUtils.GetMethodArgs(System.Reflection.MethodInfo@)">
            <summary>
            获取方法的所有参数类型
            </summary>
            <param name="method">方法信息</param>
            <returns>参数类型数组</returns>
        </member>
        <member name="M:LawnMod.MonoModUtils.GetGenericsForFunc(System.Reflection.MethodInfo@)">
            <summary>
            获取Func的类型泛型
            </summary>
            <param name="method">对应的方法</param>
            <returns>方法的类型泛型</returns>
        </member>
        <member name="M:LawnMod.MonoModUtils.GetGenericsForAction(System.Reflection.MethodInfo@)">
            <summary>
            获取Action的类型泛型
            </summary>
            <param name="method">对应的方法</param>
            <returns>方法的类型泛型</returns>
        </member>
        <member name="M:LawnMod.MonoModUtils.MakeRuntimeDetourGenerics(System.Type[]@)">
            <summary>
            制造适用于RuntimeDetour中DynamicHookGen的Target的泛型类型
            </summary>
            <param name="theTypes">函数类型</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:LawnMod.MonoModUtils.HookTo(System.Object,MonoMod.RuntimeDetour.DynamicHookGen.HookType)">
            <summary>
            Python装饰器，为Python函数Hook一个特定的C#方法
            </summary>
            <param name="funcOrMethoddesc">要Hook的C#方法的Python封装</param>
            <param name="hookType">Hook的类型</param>
            <returns>一个装饰器，其接受Python函数，返回一个HookResult对象，通过此掌控Hook的生命周期</returns>
        </member>
        <member name="M:LawnMod.MonoModUtils.As(System.Object)">
            <summary>
            Python装饰器，将Python函数转换为Hook一个C#方法所需的Delegate类型
            </summary>
            <param name="funcOrMethoddesc">要Hook的C#方法的Python封装</param>
            <returns>一个装饰器，其接受Python函数，返回所需的Delegate类型</returns>
        </member>
        <member name="M:LawnMod.MonoModUtils.AsFunc(System.Type[])">
            <summary>
            Python装饰器，将Python函数转换为Hook一个有特定原型的C#有返回值方法所需的Delegate类型
            </summary>
            <param name="generics">C# Func原型的所有参数类型</param>
            <returns>一个装饰器，其接受Python函数，返回所需的Delegate类型</returns>
        </member>
        <member name="M:LawnMod.MonoModUtils.AsAction(System.Type[])">
            <summary>
            Python装饰器，将Python函数转换为Hook一个有特定原型的C#无返回值方法所需的Delegate类型
            </summary>
            <param name="generics">C# Action原型的所有参数类型</param>
            <returns>一个装饰器，其接受Python函数，返回所需的Delegate类型</returns>
        </member>
        <member name="T:LawnMod.MonoModUtils.HookResult">
            <summary>
            HookResult对象负责抽象创建Hook部分以及掌管Hook后事务
            </summary>
        </member>
        <member name="M:LawnMod.MonoModUtils.HookResult.#ctor(System.Reflection.MethodInfo,System.Delegate,MonoMod.RuntimeDetour.DynamicHookGen.HookType,System.Boolean)">
            <summary>
            构造方法
            </summary>
            <param name="method">需要Hook的方法</param>
            <param name="hookDelegate">处理Hook的函数，需符合要求</param>
            <param name="hookType">Hook类型(On、IL、OnOrIL)</param>
            <param name="initialize">是否需要初始化(创建Hook)</param>
        </member>
        <member name="M:LawnMod.MonoModUtils.HookResult.Initialize">
            <summary>
            Hook初始化
            </summary>
        </member>
        <member name="M:LawnMod.MonoModUtils.HookResult.TryInvoke(System.Dynamic.InvokeBinder,System.Object[],System.Object@)">
            <summary>
            使HookResult类表现为一个可被调用的方法，转发参数
            </summary>
            <param name="binder"></param>
            <param name="args">调用方法的参数</param>
            <param name="result">返回值</param>
            <returns></returns>
        </member>
        <member name="M:LawnMod.MonoModUtils.HookResult.Finalize">
            <summary>
            该类析构时自动执行解除Hook
            </summary>
        </member>
        <member name="M:LawnMod.MonoModUtils.HookResult.UnHook">
            <summary>
            解除这个Hook
            </summary>
        </member>
    </members>
</doc>
